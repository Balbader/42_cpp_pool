#include "Bureaucrat.hpp"
#include "AForm.hpp"
#include "PresidentialPardonForm.hpp"
#include "ShrubberyCreationForm.hpp"
#include "RobotomyRequestForm.hpp"
#include <stdlib.h> 

void	create_a_president_form(std::string target)
{
	Bureaucrat 				William;
	Bureaucrat 				Hugo("Hugo", 1);
	PresidentialPardonForm	form(target);

	std ::cout << form;
	std::cout << "\n";

	try {
		form.execute(William);
	} catch (std::exception& e) {
		std::cerr << "Bureaucrat " << William.getName() << " couldn't execute " << form.getName() << " because " << e.what();
	}

    try {
		form.beSigned(William);
	} catch (std::exception& e)
	{
		std::cerr << "Bureaucrat " << William.getName() << " couldn't sign " << form.getName() << " because " << e.what();
	}

	William.signForm(form);
	William.execForm(form);

	std::cout << "\n";
	Hugo.signForm(form);
	Hugo.execForm(form);
}

void	create_a_shrubbery_form(std::string target)
{
	Bureaucrat 				Gurvan;
	Bureaucrat 				Meryem("Meryem", 1);
	ShrubberyCreationForm	form(target);

	std ::cout << form;
	std::cout << "\n";

	try {
		form.execute(Gurvan);
	} catch (std::exception& e) {
		std::cerr << "Bureaucrat " << Gurvan.getName() << " couldn't execute " << form.getName() << " because " << e.what();
	}

	try {
		form.beSigned(Gurvan);
	} catch (std::exception& e) {
		std::cerr << "Bureaucrat " << Gurvan.getName() << " couldn't sign " << form.getName() << " because " << e.what();
	}

	Gurvan.signForm(form);
	Gurvan.execForm(form);

	std::cout << "\n";
	Meryem.signForm(form);
	Meryem.execForm(form);
}

void	create_a_robotomy_form(std::string target)
{
	Bureaucrat 				Axel;
	Bureaucrat 				Karim("Karim", 168);
	RobotomyRequestForm		form(target);

	std ::cout << form;
	std::cout << "\n";

	try {
		form.execute(Axel);
	} catch (std::exception& e) {
		std::cerr << "Bureaucrat " << Axel.getName() << " couldn't execute " << form.getName() << " because " << e.what();
	}

	try {
		form.beSigned(Axel);
	} catch (std::exception& e) {
		std::cerr << "Bureaucrat " << Axel.getName() << " couldn't sign " << form.getName() << " because " << e.what();
	}

	Axel.signForm(form);
	Axel.execForm(form);

	std::cout << "\n";
	Karim.signForm(form);
	Karim.execForm(form);
}

int	main(int argc, char **argv)
{
	if (argc != 2) {
		std::cerr << "Error: usage is ./Form <target>.\n";
		return (ERROR);
	}

	try {
		create_a_shrubbery_form(argv[1]);
		create_a_robotomy_form(argv[1]);
		create_a_president_form(argv[1]);
	} catch (std::exception) {
		return (ERROR);
	}

	return (SUCCESS);
}
